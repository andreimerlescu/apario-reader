package main

import (
	"fmt"
	"path/filepath"

	"github.com/andreimerlescu/configurable"
)

var (
	config = configurable.New()
	// Command Line Flags
	flag_s_blackhole_file_path                     = config.NewString("blackhole-db-path", filepath.Join(".", "databases", "blackhole.db"), "Path to blackhole.db")
	flag_s_product_name                            = config.NewString("product-name", "apario-reader", "name of the product that is running, used as the prefix to the log file and throughout the runtime of the app; this is its self label")
	flag_s_environment                             = config.NewString("environment", "development", "environment label")
	flag_s_production_environment_label            = config.NewString("production-environment-label", "production", "default is production but useful when --environment value must be treated like production without using the label production. if you dont know how to use this flag, dont use it.")
	flag_s_database                                = config.NewString("database", "", "apario-contribution rendered database directory path")
	flag_i_sem_limiter                             = config.NewInt("limit", channel_buffer_size, "general purpose semaphore limiter")
	flag_i_sem_directories                         = config.NewInt("directories-limiter", channel_buffer_size, "concurrent directories to process out of the database (example: 369)")
	flag_i_sem_pages                               = config.NewInt("pages-limiter", channel_buffer_size, "concurrent pages to process out of the database")
	flag_i_directory_buffer                        = config.NewInt("directory-buffer", channel_buffer_size, "buffered channel size for pending directories from the database (3x --directories, example: 1107)")
	flag_i_buffer                                  = config.NewInt("buffer", reader_buffer_bytes, "Memory allocation for CSV buffer (min 168 * 1024 = 168KB)")
	flag_s_log_file                                = config.NewString("info-log", filepath.Join(".", "logs", fmt.Sprintf("%v-info-%04d-%02d-%02d-%02d-%02d-%02d.log", *flag_s_product_name, startedAt.Year(), startedAt.Month(), startedAt.Day(), startedAt.Hour(), startedAt.Minute(), startedAt.Second())), "File to save logs to. Default is logs/engine-YYYY-MM-DD-HH-MM-SS.log")
	flag_b_enable_cors                             = config.NewBool("enable-cors", true, "Enable/Disable CORS")
	flag_b_enable_csp                              = config.NewBool("enable-csp", true, "Enable/Disable CSP")
	flag_s_cors_allow_origin                       = config.NewString("cors-allow-origin", "*", "Define the header value for Access-Control-Allow-Origin")
	flag_s_cors_allow_methods                      = config.NewString("cors-allow-methods", "GET, POST, PUT, DELETE, OPTIONS", "Define the header value for Access-Control-Allow-Methods")
	flag_s_cors_allow_headers                      = config.NewString("cors-allow-headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization", "Define the header value for Access-Control-Allow-Headers")
	flag_s_cors_allow_credentials                  = config.NewBool("cors-allow-credentials", false, "Define the header value for Access-Control-Allow-Credentials")
	flag_s_csp_domains_csv                         = config.NewString("csp-domains-csv", "", "List of CSP domains in CSV format")
	flag_s_csp_thirdparty_csv                      = config.NewString("csp-thirdparty-csv", "", "List of third party domains in CSV format")
	flag_s_csp_thirdparty_styles_csv               = config.NewString("csp-thirdparty-styles-csv", "", "List of third party domains in CSV format")
	flag_s_csp_websocket_domains_csv               = config.NewString("csp-ws-domains-csv", "", "List of Web Socket domains in CSV format")
	flag_b_csp_script_enable_unsafe_inline         = config.NewBool("csp-script-unsafe-inline", true, "Enable/Disable Unsafe Inline script execution via CSP")
	flag_b_csp_script_enable_unsafe_eval           = config.NewBool("csp-script-unsafe-eval", false, "Enable/Disable Unsafe Eval script execution via CSP")
	flag_b_csp_child_src_enable_unsafe_inline      = config.NewBool("csp-child-unsafe-inline", true, "Enable/Disable Child SRC Unsafe Inline script execution via CSP")
	flag_b_csp_style_src_enable_unsafe_inline      = config.NewBool("csp-style-unsafe-inline", true, "Enable/Disable Style SRC Unsafe Inline script execution via CSP")
	flag_b_csp_upgrade_unsecure_requests           = config.NewBool("csp-upgrade-insecure", true, "Enable/Disable automagically upgrading HTTP to HTTPS for requests via CSP")
	flag_b_csp_block_mixed_content                 = config.NewBool("csp-block-mixed-content", true, "Enable/Disable automatically blocking mixed HTTP and HTTPS content for requests via CSP")
	flag_s_csp_report_uri                          = config.NewString("csp-report-uri", "/security/csp-report", "Path for content security policy violation reports to get logged")
	flag_s_config_file                             = config.NewString("config", filepath.Join(".", "config.yaml"), "Configuration file")
	flag_i_concurrent_searches                     = config.NewInt("concurrent-searches", 30, "maximum number of allowed concurrent searches before a waiting room appears")
	flag_s_search_algorithm                        = config.NewString("search-algorithm", "jaro_winkler", "values are wagner_fisher, ukkonen, jaro, jaro_winkler, soundex, hamming ; default is jaro_winkler")
	flag_i_search_concurrency_buffer               = config.NewInt("search-concurrency-buffer", 369, "buffer channel size for search results ; default = 369")
	flag_i_search_concurrency_limiter              = config.NewInt("search-concurrency-limiter", 9, "concurrent keyword processing per search query ; default = 9")
	flag_i_search_timeout_seconds                  = config.NewInt("search-timeout-seconds", 30, "maximum seconds to spend on a search")
	flag_f_search_jaro_threshold                   = config.NewFloat64("search-threshold-jaro", 0.71, "1.0 means exact match 0.0 means no match; default is 0.71")
	flag_f_search_jaro_winkler_threshold           = config.NewFloat64("search-threshold-jaro-winkler", 0.71, "using the JaroWinkler method, define the threshold that is tolerated; default is 0.71")
	flag_f_search_jaro_winkler_boost_threshold     = config.NewFloat64("search-jaro-winkler-boost-threshold", 0.7, "weight applied to common prefixes in matched strings comparing dictionary terms, page word data, and search query params")
	flag_i_search_jaro_winkler_prefix_size         = config.NewInt("search-jaro-winkler-prefix-size", 3, "length of a jarrow weighted prefix string")
	flag_i_search_ukkonen_icost                    = config.NewInt("search-ukkonen-icost", 1, "insert cost ; when adding a char to find a match ; increase the score by this number ; default = 1")
	flag_i_search_ukkonen_scost                    = config.NewInt("search-ukkonen-scost", 2, "substitution cost ; when replacing a char increase the score by this number ; default = 2")
	flag_i_search_ukkonen_dcost                    = config.NewInt("search-ukkonen-dcost", 1, "delete cost ; when removing a char to find a match ; increase the score by this number ; default = 1")
	flag_i_search_ukkonen_max_substitutions        = config.NewInt("search-ukkonen-max-substitutions", 2, "maximum number of substitutions allowed for a word to be considered a match ; higher value = lower accurate ; lower value = higher accuracy ; min = 0; default = 2")
	flag_i_search_wagner_fischer_icost             = config.NewInt("search-wagner-fischer-icost", 1, "insert cost ; when adding a char to find a match ; increase the score by this number ; default = 1")
	flag_i_search_wagner_fischer_scost             = config.NewInt("search-wagner-fischer-scost", 2, "substitution cost ; when replacing a char increase the score by this number ; default = 2")
	flag_i_search_wagner_fischer_dcost             = config.NewInt("search-wagner-fischer-dcost", 1, "delete cost ; when removing a char to find a match ; increase the score by this number ; default = 1")
	flag_i_search_wagner_fischer_max_substitutions = config.NewInt("search-wagner-fischer-max-substitutions", 2, "maximum number of substitutions allowed for a word to be considered a match ; higher value = lower accurate ; lower value = higher accuracy ; min = 0; default = 2")
	flag_i_search_hamming_max_substitutions        = config.NewInt("search-hamming-max-substitutions", 2, "maximum number of substitutions allowed for a word to be considered a match ; higher value = lower accuracy ; min = 1 ; default = 2")
	flag_s_gin_log_file                            = config.NewString("access-log", filepath.Join(".", "logs", fmt.Sprintf("%v-gin-%04d-%02d-%02d-%02d-%02d-%02d.log", *flag_s_product_name, startedAt.Year(), startedAt.Month(), startedAt.Day(), startedAt.Hour(), startedAt.Minute(), startedAt.Second())), "Default log file for GIN access logs.")
	flag_b_gin_log_to_stdout                       = config.NewBool("gin-log-stdout", true, "send gin logs to stdout")
	flag_i_webserver_default_port                  = config.NewInt("unsecure-port", 8080, "Port to start non-SSL version of application.")
	flag_i_webserver_secure_port                   = config.NewInt("secure-port", 8443, "Port to start the SSL version of the application.")
	flag_s_ssl_public_key                          = config.NewString("tls-public-key", "", "Path to the SSL certificate's public key. It expects any CA chain certificates to be concatenated at the end of this PEM formatted file.")
	flag_s_ssl_private_key                         = config.NewString("tls-private-key", "", "Path to the PEM formatted SSL certificate's private key.")
	flag_s_ssl_private_key_password                = config.NewString("tls-private-key-password", "", "If the PEM private key is encrypted with a password, provide it here.")
	flag_b_redirect_http_to_https                  = config.NewBool("force-https", false, "force-https when true will redirect any request into --unsecure-port to --secure-port using middleware")
	flag_b_auto_ssl                                = config.NewBool("auto-tls", false, "Create a self-signed certificate on the fly and use it for serving the application over SSL.")
	flag_i_reload_cert_every_minutes               = config.NewInt("tls-life-min", 72, "Lifespan of the auto generated self signed TLS certificate in minutes.")
	flag_i_auto_ssl_default_expires                = config.NewInt("tls-expires-in", 365*24, "Auto generated TLS/SSL certificates will automatically expire in hours.")
	flag_s_auto_ssl_company                        = config.NewString("tls-company", "ACME Inc.", "Auto generated TLS/SSL certificates are configured with the company name.")
	flag_s_auto_ssl_domain_name                    = config.NewString("tls-domain-name", "", "Auto generated TLS/SSL certificates will have this common name and run on this domain name.")
	flag_s_auto_ssl_san_ip                         = config.NewString("tls-san-ip", "", "Auto generated TLS/SSL certificates will have this SAN IP address attached to it in addition to its common name.")
	flag_s_auto_ssl_additional_domains             = config.NewString("tls-additional-domains", "", "Auto generated TLS/SSL certificates will be issued with these additional domains (CSV formatted).")
	flag_b_enable_tls_handshake_error_check        = config.NewBool("enable-middleware-tls-handshake-check", true, "Toggle whether to return an error on misconfigured TLS requests")
	flag_b_enable_rate_limiting                    = config.NewBool("enable-middleware-rate-limiting", true, "Toggle the tollbooth rate limiter for normal routes")
	flag_f_rate_limit                              = config.NewFloat64("rate-limit", 12.0, "Requests per second (0.5 = 1 request every 2 seconds).")
	flag_i_rate_limit_cleanup_delay                = config.NewInt("rate-limit-cleanup", 3, "Seconds between rate limit cleanups.")
	flag_i_rate_limit_entry_ttl                    = config.NewInt("rate-limit-ttl", 3, "Seconds a rate limit entry exists for before cleanup is triggered.")
	flag_b_enable_asset_rate_limiting              = config.NewBool("enable-middleware-asset-rate-limiting", true, "Toggle the tollbooth rate limiter for asset routes.")
	flag_f_asset_rate_limit                        = config.NewFloat64("rate-limit-asset", 36.0, "Requests per second (0.5 = 1 request every 2 seconds).")
	flag_i_asset_rate_limit_cleanup_delay          = config.NewInt("rate-limit-asset-cleanup", 17, "Seconds between rate limit cleanups.")
	flag_i_asset_rate_limit_entry_ttl              = config.NewInt("rate-limit-asset-ttl", 17, "Seconds a rate limit entry exists for before cleanup is triggered.")
	flag_b_enable_downloads_rate_limiting          = config.NewBool("enable-middleware-download-rate-limiting", true, "Toggle the tollbooth rate limiter for downloads routes.")
	flag_f_downloads_rate_limit                    = config.NewFloat64("rate-limit-download", 36.0, "Requests per second (0.5 = 1 request every 2 seconds).")
	flag_i_downloads_rate_limit_cleanup_delay      = config.NewInt("rate-limit-download-cleanup", 17, "Seconds between rate limit cleanups.")
	flag_i_downloads_rate_limit_entry_ttl          = config.NewInt("rate-limit-download-ttl", 17, "Seconds a rate limit entry exists for before cleanup is triggered.")
	flag_s_trusted_proxies                         = config.NewString("trusted-proxies", "", "Configure the web server to forward client IP addresses to the application if a proxy is used such as Nginx; set that proxy's IP here.")
	flag_s_robots_txt_path                         = config.NewString("robots-txt-path", "", "Relative path to override the /robots.txt entry that denies all crawlers.")
	flag_b_enable_ads_txt                          = config.NewBool("enable-ads-txt", false, "Enable the endpoint for /ads.txt to be served. Required to use --ads-txt-path.")
	flag_s_ads_txt_path                            = config.NewString("ads-txt-path", "", "Relative path to override the /ads.txt entry that helps fight fraud.")
	flag_b_enable_security_txt                     = config.NewBool("enable-security-txt", false, "Enable the endpoint for /security.txt to be served. Required to use --security-txt-path.")
	flag_s_security_txt_path                       = config.NewString("security-txt-path", "", "Relative path to override the /security.txt entry that helps fight fraud.")
	flag_b_enable_ip_ban_list                      = config.NewBool("enable-middleware-ip-ban-list", true, "Enable the middleware for ip ban list.")
	flag_i_ip_ban_list_synchronization             = config.NewInt("ip-ban-list-sync-delay", 3600, "seconds between synchronizing the ip ban list to disk")
	flag_s_ip_ban_file                             = config.NewString("ip-ban-file", filepath.Join(".", "database", "ip.db"), "File that contains JSON encoded values for the IP Ban list.")
	flag_s_hits_file                               = config.NewString("hits-file", filepath.Join(".", "database", "hits.db"), "File that contains a JSON encoded value of the hits on the site.")
	flag_i_online_refresh_delay_minutes            = config.NewInt("online-refresh-delay-minutes", 17, "seconds to count active online users before offline cut-off. 369 seconds = 6 minutes 9 seconds = default")
	flag_s_no_route_path_watch_list                = config.NewString("no-route-path-watch-list", "", "Pipe separated string of routes that should trigger an IP ban if too many are received.")
	flag_s_no_route_path_contains_watch_list       = config.NewString("no-route-path-contains-watch-list", "", "Pipe separated string of partial routes that should trigger an IP ban if too many are received.")
	flag_b_enable_ping                             = config.NewBool("enable-ping", true, "Enable the /ping endpoint of your application to return PONG.")
	flag_s_site_title                              = config.NewString("site-title", "Project Apario", "title of the application that appears on the web gui")
	flag_s_site_company                            = config.NewString("company-name", "Project Apario LLC", "name of the company that operates the service")
	flag_s_primary_domain                          = config.NewString("primary-domain", "projectapario.com", "primary domain name used to access the service")
	flag_s_number_decimal_place                    = config.NewString("decimal-symbol", ",", "symbol for decimals, default is .")
	flag_s_dark_mode_cookie                        = config.NewString("dark-mode-cookie-name", "dark-mode", "set the name of the cookie for dark mode")
	flag_b_use_cookies                             = config.NewBool("use-cookies", true, "toggle using cookies or not - cookies and sessions can be true but both cannot be false")
	flag_s_cookie_domain                           = config.NewString("cookie-domain", "localhost:8080", "domain to use for cookies")
	flag_b_use_sessions                            = config.NewBool("use-sessions", false, "toggle using sessions or not - cookies and sessions can be true but both cannot be false")
	flag_s_sessions_directory                      = config.NewString("sessions-directory", "", "absolute path of a directory that sessions can be stored")
	flag_s_session_secret                          = config.NewString("session-secret", "", "secret key used for securing sessions")
	flag_i_concurrent_image_views                  = config.NewInt("concurrent-image-views", 369, "concurrent hits to /covers/<doc-id>/<pg-id>/<size>.jpg permitted")
	flag_i_concurrent_asset_requests               = config.NewInt("concurrent-asset-requests", 369, "concurrent hits to /assets/* permitted")
	flag_i_concurrent_pdf_downloads                = config.NewInt("concurrent-pdf-downloads", 369, "concurrent pdf downloads permitted")
	flag_b_persist_runtime_database                = config.NewBool("persist-runtime-database", false, "boolean to persist the runtime database to disk once loaded")
	flag_b_load_persistent_runtime_database        = config.NewBool("load-persistent-database", false, "boolean to load a persisted database from disk to memory")
	flag_s_persistent_database_file                = config.NewString("persistent-database-path", filepath.Join(".", "database", "app.db"), "path to runtime database file")
	flag_s_flush_db_cache_watch_file               = config.NewString("flush-database-watch-file", filepath.Join(".", "flush-db.next-boot"), "name of a file to touch in the root directory to force the app to delete the database cache and regenerate at boot")
	flag_i_cache_control_database_seconds          = config.NewInt("cache-control-database-seconds", 1209600, "seconds for http header Cache-Control max-age=1209600 [default 14 days]")
	flag_i_cache_control_assets_seconds            = config.NewInt("cache-control-assets-seconds", 3600, "seconds for http header Cache-Control max-age=3600 [default 1 hour]")
	flag_s_users_database_directory                = config.NewString("users-database-path", filepath.Join(".", "database", "user.db"), "absolute path to store user directory information")
	flag_s_session_authenticity_token_secret       = config.NewString("session-authenticity-token-secret", "", "secret for session-authenticity-token that is used for aes-gcm encryption")
	flag_s_session_concurrent_crypt_actions        = config.NewInt("session-concurrent-crypt-actions-limit", 1776, "concurrent encrypt/decrypt calls permitted. change this value if performance is being impacted by excessive authentication requests.")
	flag_i_auth_max_failed_logins                  = config.NewInt("auth-max-failed-logins", 17, "maximum failed logins before the account is locked")
	flag_i_identifier_year_offset                  = config.NewInt("identifier-year-offset", 17, "+/- years from current year to look for documents in the database from when they were generated")
	flag_i_identifier_year_start_min               = config.NewInt("identifier-year-start-min", 0, "if > 0 then time.Now().Year() will be compared against this as a minimum cutoff to accept a document record")
	flag_i_identifier_year_end_max                 = config.NewInt("identifier-year-end-max", 0, "if > 0 then time.Now().Year() will be compared against this as a maximum cutoff year to accept a document record")
	flag_s_snippets_database                       = config.NewString("snippets-database-path", filepath.Join(".", "database", "snippets.db"), "absolute path to the snippets.db file for persistent snippets")
	flag_s_tag_database_path                       = config.NewString("tag-database-path", filepath.Join(".", "database", "tags.db"), "absolute path to the tags.db file for persistent storage")
	flag_i_database_concurrent_write_semaphore     = config.NewInt("database-concurrent-write-semaphore", 17000, "concurrent disk write operations permitted to acquire a lock")
	flag_i_user_identifier_length                  = config.NewInt("user_identifier_length", 6, "char length of the user identifier ; default is 6 which gives you 6^36 = 1.50094635e17 possibilities ; thats a lot!")
	flag_s_textee_database_path                    = config.NewString("textee-database", filepath.Join(".", "database", "textee.db"), "absolute path to textee database directory")
)
